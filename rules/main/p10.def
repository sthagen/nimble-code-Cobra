# P10 rules as patterns

# XXX write detailed output into a file

requires 3.9

def P10_1
	pe P10_1a: x:@ident ( .* ) { .* :x ( .* ) .* }
	ps caption P10_1a use of recursion

	pe P10_1b: [goto setjmp longjmp]
	ps caption P10_1b use of goto setjmp or longjmp

	ps P10_1 = P10_1a + P10_1b
	ps caption P10_1 Rule 1: restrict to simple control flow constructs
end
def P10_2
	pe P10_2a: for ( .* \; ^[< <= > >=] ^[< <= > >=] ^[< <= > >=]* \; .* )
	# at least two tokens in condition to allow for (x = y; x; x = x->nxt)
	ps caption P10_2a loop condition must contain comparison

	pe P10_2b: for ( .* \; .* < .* \; ^[/\\+ ++ +=]* )
	ps caption P10_2b loop bound, missing increment

	pe P10_2c: for ( .* \; .* > .* \; ^[/-]* )
	ps caption P10_2c loop bound, missing decrement

	ps P10_2ab = P10_2a + P10_2b
	ps P10_2 = P10_2ab + P10_2c
	ps caption P10_2 Rule 2: give all loops a fixed upper bound

	ps delete P10_2ab
end
def P10_3
	pe P10_3: ^/init ( .* ) { .* [/alloc /free] ( .* ) .* }
	ps caption P10_3 Rule 3: do not use dynamic memory allocation after initialization
end
def P10_4
	pe P10_4: @ident ( .* ) { .* } @6 (.range > 75)
	ps caption P10_4 Rule 4: limit functions to no more than 75 lines of text
end
def P10_5
	r; m assert	# assertions
	>1
	r; m \;		# statements
	>2
	%{
	   if (50*marks(1) < marks(2))
	   {	if (marks(2) > 50)
		{ print "Rule 5: counted " marks(1) " assertions; it should be > " marks(2)/50 - 1 "\n";
	   }	}
	   Stop;
	%}
	r
	pe P10_5: @ident ( .* ) { ^assert* }
	ps caption P10_5 Rule 5: use minimally two assertions per function on average
end
def P10_6
	r
	pe P10_all: @ident ^> @1 (!.curly && !.round && .len==1)
	ps caption P10_all all single letter global identifiers

	pe P10_pp: \#define ^EOL* [EOL EOF]
	ps caption P10_pp macro definitions

	ps convert P10_pp
	pe & P10_mm: @ident ^> @1 (!.curly && !.round && .len==1)
	ps caption P10_mm single letter identifiers in macro definitions
	r

	ps P10_6a = PP10_all - P10_mm
	ps delete P10_mm
	ps delete P10_all

	!scope_check -json -N1 -c P10_6b $FLAGS $ARGS > P10_6b.txt
	seed P10_6b.txt
	!rm -f P10_6b.txt
	ps caption P10_6b Declare data at the smallest possible level of scope

	ps P10_6 = P10_6a + P10_6b
	ps caption P10_6 Limit use of global data
end
def P10_7
	pe P10_7a: ^void x:@ident ( .* ) { .* } ^[/= /> /<] :x ( .* ) ^[/= /> /<]
	ps caption P10_7a failure to check return value

	pe P10_7b: @ident ( .* * x:@ident .* ) { ^:x* ^[/= /> /<] :x ^[/= /> /<] .* }
	ps caption P10_7b failure to check validity ptr param

	ps P10_7 = P10_7a + P10_7b
	ps caption P10_07 Rule 7: check the return value of non-void fcts and check the validity of fct parameters
end
def P10_8
	pe P10_8a: [\#ifdef \#ifndef] ^EOF* [\#ifdef \#ifndef]
	ps caption P10_8a use no more ifdefs than .h files

	pe P10_8b: \#define @1 (.fnm != /\.h$)
	ps caption P10_8b use defines only in .h files

	ps P10_8 = P10_8a + P10_8b
	ps caption P10_8 Rule 8: limit the use of the preprocessor to file inclusion and simple macros
end
def P10_9
	pe P10_9a: typedef ^/_ptr ^\;* * ^\;* \;
	ps caption P10_9a typedef hides a pointer dereference

	pe P10_9b: * * * @ident
	ps caption P10_9b use no more than 2 levels of dereferencing (* * *)

	pe P10_9c: * * @ident ->
	ps caption P10_9c use no more than 2 levels of dereferencing (* * ->)

	pe P10_9d: * @ident -> @ident ->
	ps caption P10_9d use no more than 2 levels of dereferencing (* -> ->)

	pe P10_9e: @ident -> @ident -> @ident ->
	ps caption P10_9e use no more than 2 levels of dereferencing (-> -> ->)

	ps P10_9ab = P10_9a + P10_9b
	ps P10_9cd = P10_9c + P10_9d
	ps P10_9abcd = P10_9ab + P10_9cd

	ps P10_9 = P10_9abcd + P10_9e
	ps caption P10_9 Rule 9: limit the use of pointers, use no more than 2 levels of dereferencing

	ps delete P10_9ab
	ps delete P10_9cd
	ps delete P10_9abcd
end
