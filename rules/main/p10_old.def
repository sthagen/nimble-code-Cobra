# see main/*.cobra

requires 3.9

def fct_names			# helper function
	m @ident \(; n
	w (!.curly)		# not inside a fct
	j			# jump to end of param list
	e {			# make sure its followed by {
	j			# jump back to start of param list
	b			# fct name
end

def p10_rule1a
	r
 	fct_names
	st {			# tag name to {
	n {			# move to {
	m ir $$			# match of fct name inside the range
	e \(			# recursive fct call
	ps create P10_R1a
	ps caption P10_R1a Do not use recursion
end

def p10_rule1b			# setjmp can be a macro
	r
	m goto
	m setjmp
	m longjmp
	ps create P10_R1b
	ps caption P10_R1b Do not use goto, setjmp, longjmp:"
end

def p10_rule1
	p10_rule1a
	p10_rule1b
	ps P10_R1 = P10_R1a + P10_R1b
	ps caption P10_R1 Restrict to simple control flow constructs
end

def p10_rule2a
	#  partial check: the loop condition must contain a comparison
	r
	m for \(; n
	n \;
	st \;	# isolate the condition
	c <
	>1
	u
	c <=
	<|1
	>1	# for p10_rule2b
	u
	c >
	>2
	u
	c >=
	<|2
	>2	# for p10_rule2c
	u
	c no <
	c no <=
	c no >
	c no >=
	%{
		if (.mark)
		{	q = .;
			cnt = 0;
			while (.mark != 0)
			{	cnt++;
				. = .nxt;
			}
			if (cnt == 1)
			{	q.mark = 0;	## for (x=ptr;x;x=x->nxt)
		}	}
	%}
	ps create P10_R2a
	ps caption P10_R2a Loop condition must contain a comparison
end

def p10_rule2b
	r	# assumes p10_rule2a ran first
	<1	# upperbound from p10_rule2a
	n; n \;	# move to increment
	st )
	c no /\+
	c no ->
	ps create P10_R2b
	ps caption P10_R2b Give all loops a fixed upper-bound (missing increment)
end

def p10_rule2c
	r	# assumes p10_rule2a ran first
	<2	# lowerbound from p10_rule2a
	n; n \;	# move to increment
	st )
	c no /\-
	c no ->
	ps create P10_R2c
	ps caption P10_R2c Give all loops a fixed upper-bound (missing decrement)
end

def p10_rule2
	p10_rule2a
	p10_rule2b
	p10_rule2c

	ps P10_R2ab = P10_R2a | P10_R2b
	ps P10_R2 = P10_R2ab + P10_R2c
	ps caption P10_R2 Give all loops a fixed upper bound

	ps delete P10_R2ab
end

def p10_rule3
	r
	fct_names
	m & /init		# name contains "init"
	n {			# start of fct body
	m ir /alloc
	>1			# these are okay
	u
	m ir free
	<|1
	>1

	r
	m /alloc; m free	# all calls
	m & (.curly>0)		# not prototype decls
	n; m & (; b		# fct calls
	<^1			# but not those in set 1
	ps create P10_R3
	ps caption P10_R3 Do not use dynamic memory allocation after initialization
end

def p10_rule4(nr)
	r
	fct_names
	n {
	w (.range > nr)
	b
	ps create P10_R4
	ps caption P10_R4 Limit functions to no more than nr lines of text
end

def p10_rule4_log(nr)
	r
	fct_names
	%{
		if (.mark == 0)
		{	Next;
		}
		f = .;
		while (.txt != "{")
		{	. = .nxt;
		}
		e = .jmp;
		cnt = 0;
		lst = .nxt;
		while (.lnr < e.lnr)
		{	if (.lnr != lst.lnr)
			{	cnt++;
			}
			lst = .;
			. = .nxt;
		}
		if (cnt <= nr)
		{	f.mark = 0;
		}
	%}
	ps create P10_R4_log
	ps caption P10_R4_log Limit functions to no more than nr logical lines
end

def p10_rule5(nr)	# assert is often a macro
	r
	%{	size1 = 0;
		size2 = 0;
		Stop;
	%}
	%{
		if (.txt == ";")
		{	size1++;	# nr statements
		} else
		{	if (match(.txt, "/[Aa][Ss][Ss][Ee][Rr][Tt]"))
			{	p = .nxt;
				if (p.txt == "(")
				{	size2++;
				}
		}	}
	%}
	%{
		if (cpu != 0)
		{	Stop;
		}
		s1 = sum(size1);	# nr statements
		s2 = sum(size2);	# nr assertions
		if (s1 > 50 && s2 < (nr*s1)/100)
		{	print "=== P10_R5: the recommended number of assertions is nr% = ";
			print ( (nr*s1)/(100) ) "\n";
			print "	found " s2 " assertions in " s1 " statements\n";
		}
		Stop;
	%}
	pe P10_R5: @type @ident ( .* ) { ^assert* }
	ps caption P10_R5 Use minimally two assertions per function on average
end

def p10_rule6a
	r
	m @ident
	m & (!.curly && !.round)
	m & /^.$
	b
	m no \.
	n
	ps create P10_R6a
	ps caption P10_R6a Do not use single-letter global identifiers
end

def p10_rule6b
	r
	!scope_check -json -N1 -c P10_R6b $FLAGS $ARGS > P10_R6b.txt
	seed P10_R6b.txt
	!rm -f P10_R6b.txt
	ps caption P10_R6b Declare data at the smallest possible level of scope
end

def p10_rule6
	p10_rule6a
	p10_rule6b
	ps P10_R6 = P10_R6a + P10_R6b
	ps caption P10_R6 Limit use of global data
end

def p10_rule7a
	r
	fcts
	n {
	c return /[^\;]		# non-void returns
	b ); j; b		# back to fct name
	%{
		unset NonVoid;
		Stop;
	%}
	%{
		if (.mark > 0)
		{	NonVoid[.txt] = .;
			.mark = 0;
		}
	%}
	m @ident \(		# find fct calls
	w (.curly > 0)
	n; j; n; m & \;		# fct();
	b; j; b			# back at name
	w (.round == 0)		# not in call or condition
	w (.bracket == 0)	# not array index
	unmark /^[Yy][Yy]	# not yacc related
	b; m no /=		# return value not assigned
	m no return		# or returned
	m no @oper		# not part of an expression
	m no )			# likely cast
	n			# back to name
	%{
		if (.mark > 0)
		{	q = NonVoid[.txt];
			if (q.seq == 0)		# not there
			{	.mark = 0;	# no warning
			}
		}
	%}
	ps create P10_R7a
	ps caption P10_R7a Check the return value of non-void functions
end

def p10_rule7b
	r
	fcts
	n \(
	m ir @ident
	b; m & *		# pointer parameter
	n
	st $$
	n $$	# first use of fct pointer parameter should be a condition
	w (.round == 0)
	>1
	b; m & *		# dereference
	>2
	r
	<1
	w (.bracket > 0)	# array index
	<|2
	>2
	r
	<1
	n; m & ->		# used as ptr
	<|2
	ps create P10_R7b
	ps caption P10_R7b Fails to check validity of pointer or array index parameters
end

def p10_rule7
	p10_rule7a
	p10_rule7b
	ps P10_R7 = P10_R7a + P10_R7b
	ps caption P10_R7 Check the return value of non-void fcts and check the validity of fct parameters
end

def p10_rule8a
	r
	%{	p1 = 0;
		p2 = 0;
		last = .;
		Stop;
	%}
	m @cpp
	m & /if
	m no /endif
	%{
		if (.mark) { p1++; }
		if (.fnm != last.fnm
		&&  match(.fnm, "/\.h$"))
		{	p2++;
			last = .;
		}
	%}
	%{
		if (cpu != 0)
		{	Stop;
		}
		p1s = sum(p1);
		p2s = sum(p2);
		if (p1s <= p2s)
		{	reset();
			Stop;
		}
	%}
	ps create P10_R8a
	ps caption P10_R8a Use no more if/ifdef/ifndef directives than .h files
end

def p10_rule8b
	r
	m @cpp
	m & /undef
	ps create P10_R8b
	ps caption P10_R8b Avoid \#undef directives
end

def p10_rule8c
	r
	m @cpp
	m & /define
	w (.fnm != /.h$ )
	n
	m no /^[Yy][Yy]
	b
	ps create P10_R8c
	ps caption P10_R8c Place macro definitions only in header files
end

def p10_rule8
	p10_rule8a
	p10_rule8b
	p10_rule8c
	ps P10_R8ab = P10_R8a + P10_R8b
	ps P10_R8 = P10_R8ab + P10_R8c
	ps delete P10_R8ab
end

def p10_rule9a
	r
	%{
		if (.txt != "typedef")
		{	Next;
		}
		q = .;
		. = .nxt;
		cnt = 0;
		while (.txt != ";")
		{	if (.txt == "{")
			{	. = .jmp;
				. = .nxt;
				continue;
			}
			if (.txt == "*")
			{	q = .;
				. = .nxt;
				cnt++;
				continue;
			}
			if (match(.txt, "/ptr$"))
			{	q = .;
				break;
			}
			. = .nxt;
		}
		if (q.txt == "*" || cnt > 1)
		{	q.mark = 1;
		}
	%}
	ps create P10_R9a
	ps caption P10_R9a Typedef hides a pointer dereference
end

def p10_rule9b
	r
	m * *; n; n; m & *
	>1
	r
	m * *; n; n; m & @ident
	n; m & ->
	<|1
	ps create P10_R9b
	ps caption P10_R9b Limit the use of pointers, use no more than 2 levels of dereferencing
end

def p10_rule9
	p10_rule9a
	p10_rule9b
	ps P10_R9 = P10_R9a + P10_R9b
end

def p10_rule10
	!echo Compile with all warnings enabled and use a static analyzer
end
