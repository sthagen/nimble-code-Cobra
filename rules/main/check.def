
def check_asm(rn)		# asm.cobra
	r;
	m asm \(
	%{
		multiple_files = 0;
		Stop;
	%}
	%{
		if (ncore > 1
		&&  . == Begin)
		{	if (cpu != 0)
			{	Stop;
			}
			. = first_t;
		}
	More:	if (.mark)
		{	if (last.lnr > 0
			&&  last.fnm != .fnm)
			{	multiple_files = 1;
				Stop;
			}
			last = .;
		}
		if (. != last_t)
		{	. = .nxt;
			goto More;
		}
		Stop;
	%}
	%{
		if (.mark)
		{	if (multiple_files)
			{	Stop;
			}
			.mark = 0;
		}
	%}
	ps create Asm
	ps caption Asm Limit the use of assembly code
end

def check_braces		# round.cobra
	# find binary operators in conditions
	# that may have insufficient parentheses
	# specifically: a & x == y
	r
	%{
		if (.txt == "(")
		{	r = .;
			. = .nxt;
			if (.txt == ")")
			{	Next;
			}
			q = .;
			z = .;
			q.mark = 0;
			while (.round >= q.round && q.mark != 3)
			{	if (.round == q.round)
				{	if (.txt == ">>"
					||  .txt == "<<"
					||  .txt == "&"
					||  .txt == "|"
					||  .txt == "^")
					{	n = .prv;
						if (n.txt != "("
						&&  .bracket == z.bracket)
						{	q.mark = q.mark | 1;
					}	}
					if (.txt == "="
					||  .txt == "=="
					||  .txt == "&&"
					||  .txt == "||")
					{	if (.bracket == z.bracket)
						{	q.mark = q.mark | 2;
				}	}	}
				. = .nxt;
			}
			if (q.mark != 3)
			{	q.mark = 0;
			} else
			{	q.mark = 1;
			}
			. = q;
		}
	%}
	ps create Braces
	ps caption Braces Use parentheses around binary operators
end

def check_side_effect(Rulename)		# side_effect.cobra
	r
	# report multiple side effects in parenthesized conditions
	%{
		if (.txt == "(")
		{	r = .prv;
			if (r.txt == "for")
			{	Next;
			}
			. = .nxt;
			if (.txt == ")")
			{	Next;
			}
			q = .;
			count = 0;
			while (.round >= q.round && count < 2)
			{	if (.round == q.round)
				{	if (.txt == "="
					||  .txt == "++"
					||  .txt == "--"
					||  .txt == "+="
					||  .txt == "-="
					||  .txt == "*="
					||  .txt == "/="
					||  .txt == "%="
					||  .txt == ">>="
					||  .txt == "<<="
					||  .txt == "&="
					||  .txt == "|="
					||  .txt == "^=")
					{	count++;
				}	}
				if (@cpp) { break; }
				. = .nxt;
			}
			if (count > 1)	# more than one side-effect
			{	q.mark = 1;
			}
			. = q;
		}
	%}
	ps create Rulename
	ps caption Rulename More than one side-effect in expression
end

def check_ipc
	r
	m /ipc_r	# vxworks
	m msgrcv	# linux
end

def check_fct_hdrs
	r
	fcts
	w (.fnm == /\.h$)
end

def check_linelength(lnl)	# linelength.cobra
	r
	%{
	# instead of the physical line length,
	# find the logical length of tokens
	if (.lnr != last.lnr)
	{	if (cnt > lnl)
		{	last.mark = 1;
		}
		cnt = 0;
		last = .;
	} else
	{	cnt = cnt + .len;
	}
	%}
end
