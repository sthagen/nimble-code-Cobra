## JPL Coding Standard

quiet on

. jpl.def
. binop.def
. jpl/rule23
. jpl/rule31

#### LOC-1 Language Compliance
jpl_rule1
# jpl_rule2	# not in scope - compile with warnings, use static analysis

#### LOC-2 Predictable Execution
jpl_rule3a
jpl_rule3b
jpl_rule3c
jpl_rule4
jpl_rule5
# jpl_rule6	# not statically checkable - use ipc messages
jpl_rule7
# jpl_rule8	# not statically checkable - transfer write permissions for shared data
jpl_rule9a
jpl_rule9b
# jpl_rule10	# not statically checkable - use memory protection, margins, barriers etc
jpl_rule11
jpl_rule12a
jpl_rule12b

#### LOC-3 Defensive Coding
jpl_rule13a

!scope_check -json -N1 -c R13 $FLAGS $ARGS > JPL_R13.txt
 seed JPL_R13.txt
 ps caption R13 Declare data at the smallest possible level of scope
 !rm -f JPL_R13.txt

jpl_rule14a
jpl_rule14b
jpl_rule14c
jpl_rule14defg
jpl_rule14h
jpl_rule15

!rm -f _TMP1_
track start _TMP1_
 jpl_rule16 2	# assertion density 2%
track stop

jpl_rule17
binop R18
jpl_rule19a
jpl_rule19b

#### LOC-4 Code Clarity
jpl_rule20a
jpl_rule20b
jpl_rule20c
jpl_rule21
jpl_rule22
jpl_rule23
jpl_rule24
jpl_rule25 75
jpl_rule26_27
jpl_rule28

# jpl_rule29	# not in scope - no non-constant fct pointers
# jpl_rule30	# not in scope - no casting of fct pointers

jpl_rule31	# place no code before #include

ps list

!rm -f _TMP2_
track start _TMP2_
	terse on
	dp *
	terse off
track stop

!cat _TMP1_ _TMP2_ > _JPL_.txt
!rm -f _TMP1_ _TMP2_

# report
!if [ -s _JPL_.txt ] ; then echo "detailed results are in file _JPL_.txt"; fi
# cleanup
!if [ -s _JPL_.txt ] ; then true; else rm -f _JPL_.txt; fi

quiet off
