# example of tracking potentially tainted data
# originating in sscanf calls
#
# source of tainted data: any value obtained from tainted fct calls,
# like scanf, env, getuser, getMethod, getNamespace, getActionName,
# or any data that is processed with calls to ntohs() or ntohl()
# (cf https://lgtm.com/blog/apache_struts_CVE-2018-11776 )
#
# the check is done in steps:
# 1. mark all places in the same fct where the tainted value is used
# 2. find marked places in fct call param lists
# 3. each of these fcts now becomes a new starting point for a check,
#    with the formal parameter marked as potentially tainted
# 4. iterate until a fixed point is reached:
#
# 5. check if any tainted variable is used
# in a call to memcpy, strcpy, strncpy sprintf, snprintf etc.

## problem: when scanning large numbers of files this can cause stack overflow
## in the inline program interpreter.  this can be ameliorated to some extent
## by adding the gcc compiler flag -fno-stack-limit -- but it can still happen
## some ways to address this:
## 1 scan fewer files at a time -- one simple way is to use multiple cores for
## this cobra run, eg: cobra -N8, or with a query command: ncore 8
## 2 restrict recursion depths in eval_prog in cobra_prog.y
## 3 rewrite this check as a standalone c_checker version (examples in src_app)

## Step 0 -- located potentially tainted sources, here just scanf arguments
r
m sscanf (
n ,	# 2nd arg
n
n ,	# 3rd arg
n
n ,	# 4th arg
b	# last identifier in 3rd arg
%{
	if (.mark && @ident)	# mark all subsequent args
	{	while (.txt != ")")
		{	if (.txt == ",")
			{	. = .prv;
				if (@ident)
				{	.mark = 1;
				}
				. = .nxt;
			}
			. = .nxt;
	}	}
%}
# p
= "step 0, nr matches:"

## Step 1 -- do a forward search and mark uses
# for each marked identifier, search forward in the fct
# body, and mark all places where they are used in a fct
# call or on the rhs of an assignment
# not yet covered: the return of a tainted value from a fct
%{
	if (.mark != 1) { Next; }
	.mark = 0;

	r = .nxt;		# we're in a fct
	while (r.curly >= 1)	# check rest of fct body
	{	if (r.txt == .txt)	# find same ident
		{	s = r.nxt;	# unless overwritten
			if (s.txt != "="
			&&  s.txt != "+="
			&&  s.txt != "-=")
			{	r.mark = 2; # mark it
			}
			s = r.prv; # check what it's assigned to
			if (s.txt == "=")
			{	s = s.prv;
				if (s.txt == "]")
				{	s = s.jmp;
					s = s.prv;
				}
				if (s.typ == "ident")
				{	s.mark = 2;
		}	}	}
		r = r.nxt;
	}
%}
# p
= "step 1, nr matches:"

## Step 2 prep -- some useful functions
%{
	TaintParam[ "makesureitsglobal" ] = 0;
	Handled[ "makesureitsglobal" ] = 0;
	function search_calls(rr)
	{
		cnt = 1;
		while (rr.txt != "(")
		{	if (rr.txt == ",") # count commas
			{	cnt++;
			}
			rr = rr.prv;
		}
		rr = rr.prv;
		if (rr.typ == "ident")	# fct name
		{	TaintParam[ rr.txt ] = cnt;
# print "set TaintParam[ " rr.txt " ] to " cnt "\n";
		}
	}

	function search_params()
	{
# print "Checking TaintParam " .txt "\n";
		fp = TaintParam[ .txt ];
		pf = Handled[ .txt ];
# print "TaintParam [ " .txt "] == " fp "\n";
		if (fp > 0 && pf == 0)
		{	Handled[ .txt ] = fp;
			cnt = 1;
#			print .fnm ":" .lnr ": " .txt " fct with tainted param nr " fp "\n";
		more:	while (.txt != ")" && .txt != ",")
			{	. = .nxt;
			}
			if (cnt == fp)
			{	. = .prv;
#				print cnt " :: " fp "	param check: " .txt "\n";
				if (@ident)
				{	# check fct body
					r = .nxt;
					while (r.txt != "{")
					{	r = r.nxt;
					}
	
					r = r.nxt;
					while (r.curly >= 1)	# rest of fct body
					{	if (r.txt == .txt)	# same ident
						{	s = r.nxt;
							if (s.txt != "="
							&&  s.txt != "+="
							&&  s.txt != "-=")	# not a clear lvalue
							{	r.mark = 2;	# new taint mark
# print r.fnm ":" r.lnr ": " r.txt " new mark 2\n";
						}	}
						r = r.nxt;
					}
				}
				. = .nxt;	# undo: . = .prv
				return;
			}
			if (.txt != ")")
			{	. = .nxt;
				cnt++;
				goto more;
		}	}
	}
	Stop;
%}

## Step 2 -- iterate on fct call checks
# find which of the marked variables appear
# as an actual parameter in a fct call
# record the fct name and parameter nr

%{
step2:
	if (marks(0) == 0)	# fixed point reached
	{	restore(1, "");
		unset TaintParam;
		unset Handled;
# print "Unset TaintParam\n";
		Stop;
	}

#	print "potentially tainted values: " marks(0) "\n";

	. = Begin;
	while (. != End)
	{	if (.mark == 2 && .round > 0)	# potential use in fct call
		{	search_calls(.prv);
			# populates the array TaintParam
			# but does not change marks
		}
		. = .nxt;
	}
	# update set of potentially tainted variables
	save(1, "|");	# add

# print "expanded set: " marks(1) "\n";

	reset();		# clear marks in 0
	fcts();			# mark fcts, to find tainted ones

	. = Begin;
	while (. != End)
	{	if (.mark == 1)	# fct def, not tainted vars
		{	.mark = 0;
			# check if fct has a tainted param
			# and if so mark the uses of those params in the fct body
			search_params();	# uses TaintParam, can add 2 marks
		}
		. = .nxt;
	}
	unset TaintParam;	# done with this round
# print "Unset2 TaintParam\n";

# print "new marks: " marks(0) "\n";

	n1 = marks(1);	# count them
	save(1, "|");
	n2 = marks(1);	# check if we reached fixpoint

	if (n2 > n1)
	{	goto step2;
	}
	unset Handled;

#	print "x set 0 marks: " marks(0) "\n";
#	print "x set 1 marks: " marks(1) "\n";
	restore(1, "");
#	print "y set 0 marks: " marks(0) "\n";
#	print "y set 1 marks: " marks(1) "\n";
	Stop;
%}
= "step 2, nr matches:"
# p

# Step 3 -- check if any mark=2 tainted variable is used
# in a call to memcpy, strcpy, strncpy sprintf, snprintf etc.
# in any other than the first argument
%{
	if (.mark != 2 || .round == 0) { .mark = 0; Next; }

	cnt = 0;
	b = .prv;
	while (b.round != 0)
	{	if (b.txt == ",")
		{	cnt = 1;
		}
		b = b.prv;
	}
	b = b.prv;	# fct name
	if (cnt == 1
	&& (b.txt == "memcpy"
	||  b.txt == "strcpy"
	||  b.txt == "strncpy"
	||  b.txt == "sprintf"
	||  b.txt == "snprintf"))
	{	b.mark = 1;
	} else
	{	.mark = 0;
	}
%}
= "potentially tainted value used in dangerous fct call: "
p
