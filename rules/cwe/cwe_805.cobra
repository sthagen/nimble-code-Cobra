# CWE-805: buffer access with incorrect length value
# some simple cases that can be checked quickly
r
fcts 0		# collect just fct defs, not also fcts called
n {
c return /^[0\-][x0UL]*$	# 0 0x00 0UL or anything preceded by - (minus)
b )
j
b
%{
	if (.mark)
	{	# name of fct that contains return 0 or return -...
		Names[.txt] = .;	# remember these names
	}
%}
%{
	# check for use of any of these names in the length field of a strncpy, strncat, or memcpy
	w_cnt = 0;
	b_cnt = 0;
	Stop;
%}

r
m /^strnc[pa][yt]$ (		# strcpy or strncat
m memcpy (
n
%{
	# case 2

	if (!.mark)      { Next; }
	.mark = 0;
	limit = .jmp;
	. = .nxt;
	if (!@ident)     { Next; }
	dest = .;
	. = .nxt;
	if (.txt != ",") { Next; }

	fc = .;		# first comma
	. = .nxt;
	while (.txt != "," || .round != fc.round)
	{	. = .nxt;
	}
	# second comma
	. = .nxt;

	while (.seq < limit.seq)
	{	if (.txt == "sizeof")
		{	. = .nxt;	# (
			. = .nxt;	# sizeof( ident ...
			if (@ident
			&&  .txt != dest.txt)
			{	.mark = 1;
				if (terse)
				{	w_cnt++;
				} else
				{	lock();
					print .fnm ":" .lnr ": cwe_805, suspicious sizeof in strncpy, strncat, ";
					print "or memcpy for other var than " dest.txt "\n";
					unlock();
			}	}
			Next;
		}
		q = .nxt;
		if (q.txt != "(")
		{	. = .nxt;
			continue;
		}
		q = Names[.txt];
		if (q.seq > 0)
		{	if (terse)
			{	b_cnt++;
			} else
			{	print .fnm ":" .lnr ": cwe_805, fct '" .txt "' may return a zero or negative value\n";
			}
			Next;
		}
		. = .nxt;
	}
%}
%{
	if (terse)
	{	lock();
		if (w_cnt > 0)
		{	print "cwe_805: " w_cnt " warnings: suspicious sizeof in strncpy, strncat, or memcpy\n";
		}
		if (b_cnt > 0)
		{	print "cwe_805: " b_cnt " warnings: fct may return zero or negative value (used in array index)\n";
		}
		unlock();
	}
	w_cnt = 0;
	b_cnt = 0;
	Stop;
%}


