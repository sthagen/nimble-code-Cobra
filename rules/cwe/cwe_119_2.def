# CWE-119_2: Improper Restriction of Operations within the Bounds of a Memory Buffer
# pattern 2: array indexed with unchecked return value obtained from another function
# this is where most of the time goes

def cwe_119_2_start
	r
	m @ident
	m & (.curly > 0)
	%{
		w_cnt = 0;
		l_cnt = 0;
		lastfnm = .;
		Stop;
	%}
end

def cwe_119_2_main
   %{
	if (.mark == 0)
	{	if (.curly > 0) { Next; }
		# in between fcts, process warnings for previous fct
		# reporting
		if (lastfnm.fnm != .fnm)
		{	l_cnt = 0;
			lastfnm = .;
		}
		for (i in Suspect)
		{	if (IxVar[i.txt] != 0)
			{	if (terse)
				{	w_cnt++;
					l_cnt++;
					if (verbose || w_cnt < 10)
					{	Files[.fnm] = l_cnt;
					}
				} else
				{	x = Suspect[i.txt];	# wherethe var is *last* set
					zz = IxVar[i.txt];	# where it is used as an index
					if (x.seq != 0 && x.lnr <= zz.lnr)
					{	x.mark = 1;
				#	lock();
				#	print x.fnm ":" zz.lnr ": cwe_119_2: array-index variable '";
				#	print  x.txt "' has unchecked value.\n";
				#	unlock();
		}	}	}	}
		unset Suspect;
		unset IxVar;
		Next;
	}
	.mark = 0;
	pt = .prv;
	v = .;				# identifier
	. = .nxt;
	if (.txt == "=")
	{	. = .nxt;
		if (@ident)		# ident = ident ( ... )
		{	. = .nxt;
			if (.txt == "(" && pt.txt != "*")
			{	Suspect[v.fnm, v.txt] = v;	# assigned from fct
				. = v;
				Next;
			}
			. = .prv;
		}
		unset Suspect[v.fnm, v.txt];	# its assigned, but not from a fct
		. = v;
		Next;
	} else
	{	. = v.prv;
		nt = v.nxt;
		pt = .prv;
		if (.txt == "&"
		&&  pt.typ != "ident"
		&&  nt.txt != "->"
		&&  nt.txt != ".")
		{	Suspect[v.fnm, v.txt] = v;	# address of var is taken
			. = v.nxt;	# undo .prv
			Next;
		}
		. = v.nxt; # undo .prv
		# check for idents used in expression or array index
	}

	if (v.round > 0)
	{	. = v.prv;
		if (@oper)
		{	unset Suspect[v.fnm, v.txt];
 		}
		. = v.nxt;
		if (@oper)
		{	unset Suspect[v.fnm, v.txt];
	}	}

	. = v.nxt;		# right after identifier

	if (.txt == "[")
	{	eob = .jmp;	# end of array index
		while (.seq < eob.seq)
		{	pt = .;
			. = .nxt;
			if (@ident)
			{	nt = .nxt;
				if (nt.txt != "->"
				&&  nt.txt != "."
				&&  nt.txt != "&"
				&&  pt.txt != "->"
				&&  pt.txt != "."
				&&  pt.txt != "&")
				{	xyx = Suspect[.fnm, .txt];
					if (xyx.seq > 0)
					{	IxVar[.fnm, .txt] = .;
	}	}	}	}	}
   %}
end

def cwe_119_2_wrap
   %{
#	w_cnt = 0;
#	l_cnt = 0;
	lastfnm = prim;
	for (i in Suspect)
	{	if (IxVar[i.txt] != 0)
		{	if (terse)
			{	w_cnt++;
				if (lastfnm.fnm != .fnm)
				{	l_cnt = 0;
					lastfnm = .;
				}
				l_cnt++;
				if (verbose || w_cnt < 10)
				{	Files[.fnm] = l_cnt;
				}
			} else
			{	x = Suspect[i.txt];
				if (x.seq != 0)
				{	x.mark = 1;
			#	lock();
			#	print x.fnm ":" x.lnr ": cwe_119_2: array-index variable '";
			#	print  x.txt "' has unchecked value\n";
			#	unlock();
	}	}	}	}

	if (terse && w_cnt > 0)
	{	lock();
		print "cwe_119_2: " w_cnt " warnings: array-index variable has unchecked min/max value\n";
		if (verbose || w_cnt < 10)
		{	for (a in Files)
			{	print "\t" a.txt ": " Files[a.txt] " warnings\n";
		}	}
		unlock();
	}
	w_cnt = 0;
	unset IxVar;
	unset Suspect;
	unset Files;
	Stop;
   %}
end

def cwe_119_2_set
	ps create CWE_119_2
	ps caption CWE_119_2 Array-index variable with unchecked min/max value
end
