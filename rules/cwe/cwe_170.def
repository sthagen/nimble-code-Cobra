# CWE-170: improper null termination

requires 3.9

def cwe_170_start
   r
#  %{
#	w_cnt = 0;
#	Stop;
#  %}
end

def cwe_170_main
   %{
	# look for straight character array declarations with known size
	if (.txt == "{")
	{	Curly[.curly+1]++;	# block number
	}
	if (.txt == "char")
	{	. = .nxt;
		if (@ident)
		{	vnm = .;
			. = .nxt;
			if (.txt == "[")
			{	. = .nxt;
				if (@const_int)
				{	isz = .;
					bnr = Curly[.curly];
					Strings[.curly , bnr, vnm.txt] = isz.txt;
	}	}	}	}

	if (.txt != "strncpy") { Next; }

	. = .nxt;	# (
	. = .nxt;	# @ident
	if (!@ident) { Next; }
	dst = .;
	while (.txt != ",")
	{	. = .nxt;
	}
	# first ,
	. = .nxt;		# skip over the first arg, to match the 2nd
	while (.txt != ",")
	{	. = .nxt;
	}
	# second ,
	. = .nxt;		# size argument of the strncpy

	if (.txt == "sizeof")	# find sizeof ( what )
	{	. = .nxt;	# (
		tlvl = .round;
		. = .nxt;	# @ident
		if (@ident && .txt == dst.txt)
		{	. = .nxt;
			while (.txt != ")" || .round != tlvl)
			{	. = .nxt;
			}
			. = .nxt;	# should be - 1
			if (.txt != "-")
			{	.mark = 1;
			#	if (terse)
			#	{	w_cnt++;
			#	} else
			#	{	lock();
			#		print .fnm ":" .lnr ": cwe_170: '"  dst.txt;
			#		print "' in strncpy may not be null terminated\n";
			#		unlock();
			#	}
		}	}
	} else
	{	if (@const_int)
		{	dsz = Strings[.curly , bnr, dst.txt]; # declared size
			nst = .curly;
			while (dsz.txt == 0 && nst > 0)
			{	nst--;
				dsz = Strings[nst , bnr, dst.txt];
			}
			if (dsz.txt > 0 && dsz.txt <= .txt)
			{	.mark = 1;
			#	if (terse)
			#	{	w_cnt++;
			#	} else
			#	{	lock();
			#		print .fnm ":" .lnr ": cwe_170: '"  dst.txt;
			#		print "' in strncpy may not be null terminated\n";
			#		unlock();
			#	}
			}
		}
	}
   %}
end

def cwe_170_wrap
   %{
#	if (terse && w_cnt > 0)
#	{	lock();
#		print "cwe_170: " w_cnt " warnings: destination in strncpy may not be null terminated\n";
#		unlock();
#	}
#	w_cnt = 0;
	Stop;
  %}
end

def cwe_170_set
	ps create CWE_170
	ps caption CWE_170 Destination in strncpy may not be null terminated
end
