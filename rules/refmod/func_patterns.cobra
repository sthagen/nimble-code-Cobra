
# func_patterns.cobra
# reveal inconsistencies in checking return values of functions
# without setting a value for Ratio, prints all inconsistencies found
# with Ratio=N, shows all inconsistencies where the value is checked N% of the time or less
# example:
# cobra -prune -f refmod/func_patterns -var Ratio=10 -MaxMem 24000 `cat c_files`

def check_returns(Ratio)
 m @ident (
 m & (.curly != 0)
 %{
	unset ValUsed;
	unset NotUsed;
	unset Sample;
	unset FctNames;
	Stop;
 %}
 %{
	if (.mark == 0)
	{	Next;
	}
	.mark = 0;
	p = .prv;
	n = .nxt;
	before = 0;	# evidence that value returned is used
	after  = 0;
	if (p.txt == ")" && p.jmp != 0)	# could be a cast
	{	p = p.jmp;
		p = p.prv;
		if (p.typ != "key")	# else: not a cast
		{	before = 1;
	}	}
	if (p.typ == "oper" && p.txt != ":")
	{	before = 1;
	} else
	{	if (p.txt == ":")	# conditional expression or label?
		{	q = p.prv;	# likely ident or keyword etc
			q = q.prv;	# test simplest case
			if (q.txt == "?")
			{	before = 1;
			}
		} else
		{	if (p.txt == "return")
			{	before = 1;
			} else
			{	if (p.typ == "type")
				{	Next; # declaration
	}	}	}	}
	if (n.jmp != 0)
	{	n = n.jmp;
		n = n.nxt;
	}
	if (n.typ == "oper")
	{	after = 1;
	}
	if (before + after + .round + .bracket > 0)
	{	v = 1;
		ValUsed[.txt]++;
	} else
	{	v = 0;
		NotUsed[.txt]++;
		Sample[.txt] = .;
	}
	FctNames[.txt]++;
 %}
 %{
	for (i in FctNames)
	{	val_used     = ValUsed[i.txt];
		val_not_used = NotUsed[i.txt];

		if (val_used > 0 && val_not_used > 0)
		{	total_calls = val_not_used + val_used;	# > 0
			if (((100 * val_not_used) / total_calls) <= Ratio)
			{	q = Sample[i.txt];
				print q.fnm ":" q.lnr ":\t" i.txt "()\t returns a ";
				print "value that is not tested " val_not_used " out of " total_calls " times\n";
	}	}	}
	Stop;
 %}
end

check_returns(100)
