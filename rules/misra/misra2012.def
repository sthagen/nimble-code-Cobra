. basic.def

requires 3.9

def m12rule1_2
	r; m @cpp; m & /pragma
	ps create M12_R1_2
	ps caption M12_R1_2 (Advisory) Language extensions should not be used
end

def m12rule2_6
	r; m ?; s :	# find p ? r : s
	n :; b		# move mark to the ident before the :
	>1		# save
	r
	m @ident :	# find name :
	n; n		# to token following :
	unmark /^[0-9]$	# exclude bitfield declarations name : nr
	b; b; b		# to token before name
	unmark case	# exclude case stmnts
	n		# back to name
	<^1		# exclude conditional expressions
	>1		# all proper labelnames, at point of definition
	st goto $$	# forward to goto followed by labelname
	>2		# all backward jumps
	r
	<1		# restore marks from set 1
	<^2		# take the difference between 1 and 2
	>3		# forward jumps and unused labels
	b goto $$	# see if we can move backward to goto, if there
	n; n $$ :	# go back to the label
	<^2		# the others are unused labels
	ps create M12_R2_6
	ps caption M12_R2_6 (Advisory) A fct should not contain unused label declarations
end

def m12rule2_7
	r; m @ident \(
	n; j; e {; j	# remains: fct declarations, at the (
	m ir @ident	# mark all parameter names (and typedef names
	e /^[,)]$	# most of the parameter names
	>1
	st $$		# search forward for the name
	>2
	<1
	<^2		# what remains are unused parameters
	ps create M12_R2_7
	ps caption M12_R2_7 (Advisory) There should be no unused parameters in fcts
end

def m12rule3_1
	r; m @cmnt; m & //\*.*/\*
	>1
	r; m @cmnt; m & //\*.*//
	<|1
	>1
	r; m @cmnt; m & ///.*/\*
	<|1
	>1
	r; m @cmnt; m & ///.*//
	<|1
	ps create M12_R3_1
	ps caption M12_R3_1 (Required) The character sequences /* and // shall not be used within a comment
end

def m12rule3_2
	r
	m @cmnt; m & ///.*\\$
	ps create M12_R3_2
	ps caption M12_R3_2 (Required) Line-splicing shall not be used in // comments
end

def m12rule4_1
	r; m \\\ /^['\"?abfnrtvxX0-9]		# undefined escape
	>1
	r; m \\\ /^[0-9][0-9][0-9]$		# octal escape
	<|1
	>1
	r; m /^['"]\x[0-9][0-9][^'"]		# not properly terminated escape
	<|1
	ps create M12_R4_1
	ps caption M12_R4_1 (Required) Octal and hexadecimal escape sequences shall be terminated
end

def m12rule4_2
	r; m ? ?; n; e /^[=\(\)/'<>!\-]		# use of trigraphs
	ps create M12_R4_2
	ps caption M12_R4_2 (Advisory) Trigraphs should not be used
end

def m12rule4_3
	r; m asm; b {; s asm; c \;
	>1
	r; m asm; n \;; s }; c \;
	<|1
	ps create M12_R4_3
	ps caption M12_R4_3 (Required) Assembly language shall be encapsulated and isolated
end

def m12rule4_4
	r
	m //\*.*\;.*\*/			# ; in C comment
	m //\*[^\*]*\;			# avoid /* ... */ ...;
	m //\*[^/]*\;			# ditto
	m ///.*\;			# ; in C++ comment
	ps create M12_R4_4
	ps caption M12_R4_4 (Advisory) Sections of code should not be commented out
end

def m12rule4_6
	r; m char; m int; m short; m long; m float; m double
	ps create M12_R4_6
	ps caption M12_R4_6 (Advisory) typedefs that indicate size and signedness should be used in place of the basic numerical types
end

def m12rule4_12
	r; m /alloc; m free
	ps create M12_R4_12
	ps caption M12_R4_12 (Required) Dynamic memory allocation shall not be used
end

def m12rule6_2
	r; m ?; s :	# find p ? r : s
	n :; b		# move mark to the ident before the :
	>1		# save
	r
	m : 1		# find potential single bit-field declarations
	b		# back to the identifier name
	<^1		# exclude conditional expressions
	b		# to the type name (eg int or char)
	unmark unsigned	# unsigned is okay
	b		# should be unsigned
	unmark unsigned	# unsigned is okay
	n :; n
	ps create M12_R6_2
	ps caption M12_R6_2 (Required) Single-bit named bit fields shall not be of a signed type
end

def m12rule7_1
	r; m \\\ /^[0-9][0-9][0-9]$		# octal escape
	ps create M12_R7_1
	ps caption M12_R7_1 (Required) Octal constants shall not be used
end

def m12rule7_3
	r; m /^[0-9]+l$
	ps create M12_R7_3
	ps caption M12_R7_3 (Required) The lowercase character l shall not be used in a literal suffix
end

def m12rule8_9
	r
	!scope_check -json -N1 -c M12_R8_9 $FLAGS $ARGS > _M12_R8_9.txt
	seed _M12_R8_9.txt
	ps caption M12_R8_9 (Advisory) An object should be defined at block scope if its identifier only appears in a single function
	!rm -f _M12_R8_9.txt
end

def m12rule8_11
	r; m extern; s \; c [; n [; e ]
	ps create M12_R8_11
	ps caption M12_R8_11 (Required) When an array with external linkage is declared, its size should be explicitly specified
end

def m12rule8_14
	r; m restrict
	ps create M12_R8_14
	ps caption M12_R8_14 (Required) The restrict type qualifier shall not be used
end

def m12rule12_3
	r; m @type; s \;; c ,; m ,		# commas in declarations
	>1
	r; m ,
	w (.curly>0 && .round == 0)
	<^1
	ps create M12_R12_3
	ps caption M12_R12_3 (Advisory) The comma operator should not be used
end

def m12rule13_4
	r; m if;    n; c /[-+][-+]		# pre or post increments
	>1
	r; m if;    n; c /[^=<>!]=		# assignments
	<|1
	>1
	r; m while; n; c /[-+][-+]
	<|1
	>1
	r; m while; n; c /[^=<>!]=
	<|1
	>1
	r; m for;   n \;; s \;; c /[-+][-+]
	<|1
	>1
	r; m for;   n \;; s \;; c /[^=<>!]=
	<|1
	ps create M12_R13_4
	ps caption M12_R13_4 (Advisory) The result of an assignment operator should not be used
end

def m12rule13_5
	r; m \&&; s top ); c no \;; c /[-+][-+]	# not in for-loop; pre or post increments
	>1
	r; m \||; s top ); c no \;; c /[-+][-+]
	<|1
	>1
	r; m \&&; s top ); c no \;; c /[^=<>!]=		# assignments
	<|1
	>1
	r; m \||; s top ); c no \;; c /[^=<>!]=
	<|1
	>1
	r; m \&&; s top ); c no \;; c /[a-zA-Z0-9_]+\(		# fct calls
	<|1
	>1
	r; m \||; s top ); c no \;; c /[a-zA-Z0-9_]+\(		# fct calls
	<|1
	ps create M12_R13_5
	ps caption M12_R13_5 (Required) The right hand operand of && or || shall not contain persistent side effects
end

def m12rule13_6
	r; m sizeof; n
#	c /[-=\+\(]		# xxx false match on: sizeof( (array) )
	%{
		if (.mark == 0 || .txt != "(") { Next; }
		r = .prv;
		q = .jmp;
		.mark = 0;
		while (. != q)
		{	if (.txt == "++"
			||  .txt == "--"
			||  .txt == "="
			||  .txt == "+="
			||  .txt == "-="
			||  .txt == "*="
			||  .txt == "/=")
			{	r.mark = 1;
			} else
			{	if (.txt == "(")
				{	. = .prv;
					if (@ident)
					{	r.mark = 1;
					}
					. = .nxt;
			}	}
			. = .nxt;
		}
	%}
	ps create M12_R13_6
	ps caption M12_R13_6 (Mandatory) The operand of sizeof shall not have side effects
end

def m12rule15_1
	r; m goto
	ps create M12_R15_1
	ps caption M12_R15_1 (Advisory) The goto stmnt should not be used
end

def m12rule15_2
	r; m goto; n	# names of labels used in gotos
	>1		# all labelnames
	st $$ :		# forward to labelname followed by colon
	>2		# only forward jumps
	r
	<1		# restore marks from set 1
	<^2		# take the difference between 1 and 2
	ps create M12_R15_2
	ps caption M12_R15_2 (Required) The goto stmnt shall jump to a label declared later in the same fct
end

def m12rule15_4
	r; m switch \(
	n; j; e {; n	# ; n; s top }
	m ir break	# marks break stmnts inside switch
	>1		# save these
	r; m for \(; n; j; e {; n
	m ir break
	<^1		# exclude break stmnts inside switch
	%{		# count nr of break stmnts in each for-loop
		if (.txt != "for") { Next; }
		r = .;
		. = .nxt;
		if (.txt != "(") { Next; }
		. = .jmp;
		if (.txt != ")") { Next; }
		. = .nxt;
		if (.txt != "{") { Next; }
		q = .jmp;
		while (. != q) {
			r.mark = r.mark + .mark;
			.mark = 0;
			. = .nxt;
		}
		if (r.mark == 1)
		{	r.mark = 0;
		}
	%}
	ps create M12_R15_4
	ps caption M12_R15_4 (Advisory) There should be no more than one break or goto stmnt used to terminate any iteration stmnt
end

def m12rule15_5
	r; m @ident \(
	m & (!.curly(
	n; j; e {; n
	c return
	n return
	n \;
	n
	w (.txt != } || .curly > 1)
	b return
	ps create M12_R15_5
	ps caption M12_R15_5 (Advisory) A fct should have a single point of exit at the end
end

def m12rule15_6
	r; m switch \(; n; j; n; unmark {
	>1
	r; m while; b; unmark }
	n; n; j; n; unmark {; unmark \;
	b; b; b
	<|1
	>1
	r; m do;    n;       unmark {; b
	<|1
	>1
	r; m for;   n; j; n; unmark {; b
	<|1
	ps create M12_R15_6
	ps caption M12_R15_6 (Required) The body of an iteration-stmnt or a selection-stmnt shall be a compound-stmnt
end

def m12rule15_7
	check_ifelseif M12_R15_7
	ps create M12_R15_7
	ps caption M12_R15_7 (Required) All if ... else if constructs shall be terminated with an else stmnt
end

def m12rule16_3
	r; m case; s top case; c \;; c no switch; c no break
	>1
	r; m case; s top default; c \;; c no switch; c no break
	<|1
	>1
	r; m case; s up };
	c \;; c no case; c no default; c no switch; c no break
	<|1
	ps create M12_R16_3
	ps caption M12_R16_3 (Required) An unconditional break stmnt shall terminate every switch-clause
end

def m12rule16_4
	r; m switch
	n {
	c top no default
	b ); j; b
	ps create M12_R16_4
	ps caption M12_R16_4 (Required) Every switch stmnt shall have a default label
end

def m12rule16_6
	r; m switch; n {; c no case
	ps create M12_R16_6
	ps caption M12_R16_6 (Required) Every switch stmnt shall have at least two switch-clauses
end

def m12rule17_1
	r; m @cpp; m & /stdarg.h
	ps create M12_R17_1
	ps caption M12_R17_1 (Required) The features of <stdarg.h> shall not be used
end

def m12rule17_2
	r; m @ident \(; n; j; ex {; j; b	# all fct declarations
	st top }		# set range to fct body (stretch command)
	m ir $$			# match of fct name inside the range
	e \(			# recursive fct call
	ps create M12_R17_2
	ps caption M12_R17_2 (Required) Functions shall not call themselves, either directly or indirectly
end

def m12rule17_4
	r; m @ident \(; n; j; extend {; j; b; b; mark no void; n {
	c no return	# should match zero ranges
	u		# undo
	m ir return	# match all return stmnts inside range
	n		# move to the token that follows, which should not be a semicolon
	m & \;		# return stmnt without expression
	ps create M12_R17_4
	ps caption M12_R17_4 (Mandatory) All exit paths from a fct with non-void return type shall have an explicit return stmnt with an expression
end

def m12rule17_6
	r; m @ident \(; n; j; e {; j
	c [
	n [
	c static
	ps create M12_R17_6
	ps caption M12_R17_6 (Mandatory) The declaration of an array parameter shall not contain the static keyword between the [ ]
end

def m12rule17_8
	r; m @ident \(; n; j; e {; j
	m ir @ident
	st $$
	n $$
	e ++
	>1
	u
	e --
	<|1
	>1
	u
	e =
	<|1
	ps create M12_R17_8
	ps caption M12_R17_8 (Advisory) A fct parameter should not be modified
end

def m12rule18_5
	r; m * *; n; n; m & *
	>1
	r; m * *; n; n; m & @ident; n; m & [
	<|1
	ps create M12_R18_5
	ps caption M12_R18_5 (Advisory) Declarations should contain no more than two levels of pointer nesting
end

def m12rule18_7
	r; m @ident [
	n; e ]		# name []
	n; e /^\;,$	# ]
	b		# [
	b		# name
	b		# type
	b		# qualifier
	unmark extern
	ps create M12_R18_7
	ps caption M12_R18_7 (Required) Flexible array members shall not be declared
end

def m12rule19_2
	r; m union
	ps create M12_R19_2
	ps caption M12_R19_2 (Advisory) The union keyword should not be used
end

def m12rule20_1
	. jpl/rule31.cobra
	ps create M12_R20_1
	ps caption M12_R20_1 include directives should only be preceded by preprocessor directives or comments
end

def m12rule20_2
	r; m @cpp; m & /include.*['"\\\*]
	ps create M12_R20_2
	ps caption M12_R20_2 (Required) Single or double quote or \ characters and the /* or // character sequences shall not occur in a header file name
end

def m12rule20_3
	r; m @cpp; m & /include; m no /\<; m no /
	ps create M12_R20_3
	ps caption M12_R20_3 (Advisory) (Required) The \#include directive shall be followed by either a <filename> or 'filename' sequence
end

def m12rule20_5
	r; m @cpp; m & /undef
	ps create M12_R20_5
	ps caption M12_R20_5 (Advisory) \#undef should not be used
end

def m12rule20_10
	r; m @cpp; m & /define.*\#
	ps create M12_R20_10
	ps caption M12_R20_10 (Advisory) The \# and \#\# preprocessor operators should not be used
end

def m12rule21_3
	r; m /alloc; m free
	ps create M12_R21_3
	ps caption M12_R21_3 (Required) The memory allocation and deallocation fcts of <stdlib.h> shall not be used
end

def m12rule21_4
	r; m @cpp; m & /setjmp.h
	ps create M12_R21_4
	ps caption M12_R21_4 (Required) The standard header file <setjmp.h> shall not be used
end

def m12rule21_5
	r; m @cpp; m & /signal.h
	ps create M12_R21_5
	ps caption M12_R21_5 (Required) The standard header file <signal.h> shall not be used
end

def m12rule21_6
	r; m @cpp; m & /stdio.h
	ps create M12_R21_6
	ps caption M12_R21_6 (Required) The Standard Library input/output fcts shall not be used
end

def m12rule21_7
	r; m atof; m atoi; m atol
	ps create M12_R21_7
	ps caption M12_R21_7 (Required) The atof, atoi, atol and atoll fcts of <stdlib.h> shall not be used
end

def m12rule21_8
	r; m abort; m exit; m getenv; m system
	ps create M12_R21_8
	ps caption M12_R21_8 (Required) The library fcts abort, exit, getenv and system of <stdlib.h> shall not be used
end

def m12rule21_9
	r; m bsearch; m qsort
	ps create M12_R21_9
	ps caption M12_R21_9 (Required) The library fcts bsearch and qsort of <stdlib.h> shall not be used
end

def m12rule21_10
	r; m @cpp; m & /time.h
	ps create M12_R21_10
	ps caption M12_R21_10 (Required) The standard library time and date fcts shall not be used
end
def m12rule21_11
	r; m @cpp; m & /tgmath.h
	ps create M12_R21_11
	ps caption M12_R21_11 (Required) The standard header file <tgmath.h> shall not be used
end
def m12rule21_12
	r; m @cpp; m & /fenv.h
	ps create M12_R21_12
	ps caption M12_R21_12 (Advisory) The exception handling features of <fenv.h> should not be used
end
