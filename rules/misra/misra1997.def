# Misra 1997 original guidelines
# 60 of 127 rules have at least a partial check

requires 4.0

. basic.def

def m97_rule3
	r; m asm; b {; s asm; c \;
	>1
	r; m asm; n \;; s }; c \;
	<|1
	ps create M97_R3
	ps caption M97_R3 (Advisory) Assembly language fcts called from C should be written as C fcts containing only in-line assembly language, and in-line assembly language should not be embedded in normal C code
end

def m97_rule5
	r
	m \\\ /^['\"?abfnrtvxX0-9]		# undefined escape
	m \\\ /^[0-9][0-9][0-9]$		# octal escape
	ps create M97_R5
	ps caption M97_R5 (Required) Only those escape sequences which are defined in the ISO C standard shall be used
end

def m97_rule7
	r; m ? ?; n; e /^[=\(\)/'<>!\-]	# use of trigraphs
	ps create M97_R7
	ps caption M97_R7 (Required) Trigraphs shall not be used
end

def m97_rule8
	r; m @str; m & /^L		# L"Fred" is a wide string literal
	ps create M97_R8
	ps caption M97_R8 (Required) Multibyte characters and wide string literals shall not be used
#	rule omitted in misra2004
end

def m97_rule9
	comments
	r
	m /^/\*.*/\*			# nested C comments
	m /^//.*/\*
	ps create M97_R9
	ps caption M97_R9 (Required) Comments shall not be nested
	source
end

def m97_rule10
	comments
	r; m /\;		# stmnt separator in comment
	ps create M97_R10
	ps caption M97_R10 (Advisory) Sections of code should not be commented out
	source
end

def m97_rule11
	r; m @ident; m & (.len > 31)
	ps create M97_R11
	ps caption M97_R11 (Required) Identifiers shall not rely on significance of more than 31 characters
end

def m97_rule12
	r
	# eg: Do not reuse name of a record in a struct or union for variables declared elsewhere.
	%{
		unset N;
		Stop;
	%}
	%{
		if (.txt == "struct"
		||  .txt == "union")
		{	b = .prv;
			if (b.txt == "typedef")
			{	Next;
			}
			. = .nxt;
			N[.txt] = .;
			b = .nxt;	# {
			if (b.txt != "{")
			{	Next;
			}
			. = b.nxt;
			b = b.jmp;
			while (.seq < b.seq)
			{	if (.type == "ident")
				{	N[.txt] = .;
				}
				. = .nxt;
			}
		}
	%}
	%{
		if (.type == "type")
		{	b = .prv;
			if (b.txt == "struct"
			||  b.txt == "union")	# eg typedef Name Name;
			{	Next;
			}
			. = .nxt;
			p = N[.txt];
			if (p.seq > 0 && p.seq != .seq)
			{	if (verbose)
				{	if (.lnr < p.lnr)
					{	p.mark = 1;
						print .fnm ":" .lnr ": " p.txt " reused at " p.fnm ":" p.lnr "\n";
					} else
					{	.mark = 1;
						print p.fnm ":" p.lnr ": " p.txt " reused at " .fnm ":" .lnr "\n";
					}
				} else
				{	.mark = 1;
					p.mark = 1;
		}	}	}
	%}
	ps create M97_R12
	ps caption M97_R12 (Advisory) No identifier in one name space shall have the same spelling as an identifier in another name space
end

def m97_rule13
	r; m char; m int; m short; m long; m float; m double
	ps create M97_R13
	ps caption M97_R13 (Advisory) The basic types char, int, short, long, float, and double should not be used
end

def m97_rule14
	r; m char; b; unmark signed; unmark unsigned; n
	ps create M97_R14
	ps caption M97_R14 (Required) The type char shall be declared as unsigned or signed char
end

def m97_rule16
	r
	symbols
	m |
	m \&
	m ~
	m <<
	m >>
	%{
		if (.mark == 0) { Next; }
		.mark = 0;
		p = .prv;
		q = p.bound;
		if (q.seq > 0 && q.txt == "float")
		{	add_pattern(M97_R16, q, p);
			Next;
		}
		p = .nxt;
		q = p.bound;
		if (q.seq > 0 && q.txt == "float")
		{	add_pattern(M97_R16, q, p);
		}
	%}
	ps caption M97_R16 (Required) The underlying bit representations of floating-point values shall not be used.
end

def m97_rule17
	r
	%{
		unset Typedefs;
		Stop;
	%}
	m typedef	# look for last ident before semi-colon
	%{
		if (.mark == 0) { Next; }
		.mark = 0;
		q = .;
		while (q.txt != ";" || q.curly > .curly)
		{	q = q.nxt;
			if (q.seq == 0) { Next; }
		}
		q = q.prv;
		if (q.typ != "ident")
		{	Next;
		}
		Typedefs[q.txt] = .;
	%}
	%{
		q = Typedefs[.txt];
		if (q.seq == 0) { Next; }
		b = q.prv;
		c = q.nxt;
		if (b.txt == "struct"
		||  b.txt == "union"
		||  b.txt == "enum"
		||  b.typ == "type"
		||  b.txt == "goto"
		||  c.txt == ":")
		{	add_pattern(M97_R17, q, q);
		}
	%}
	ps caption M97_R17 (Required) Typedef names shall not be reused for any other purpose in the application.
end

def m97_rule19
	r
	m /^0[0-9]			# octal constant
	m \\\ /^[0-9][0-9][0-9]$	# octal escape
	ps create M97_R19
	ps caption M97_R19 (Required) Octal constants (other than zero) shall not be used
end

def m97_rule21
	r
	m @type @ident
	m & (.curly > 0)
	%{
		if (.mark == 0)
		{	Next;
		}
		.mark = 0;
		nm = .nxt;
		p = nm.nxt;
		# search to end of block to see if nm is redeclared
		while (p.curly >= .curly && p.lnr > 0)
		{	if (p.txt == nm.txt && p.curly > nm.curly)
			{	q = p.prv;
				if (q.typ == "type")
				{	p.mark = 1;
			}	}
			p = p.nxt;
		}
	%}
	ps create M97_R21
	ps caption M97_R21 (Required) Declarations within an inner scope should not hide any declarations in an outer scope
end

def m97_rule22
	r
	!scope_check -json -N1 -c M97_R22 $FLAGS $ARGS > _M97_R22.txt
	seed _M97_R22.txt
	!rm -f _M97_R22.txt
	ps caption M97_R22 (Advisory) Declarations of objects should be at function scope unless a wider scope is necessary
end

def m97_rule23
	# "Rule 23 (Advisory) All declarations at file scope should be static where possible."
	# covered by !scope_check above
end

def m97_rule24
	r; m extern; m & (.curly > 0)	# partial check
	ps create M97_R24
	ps caption M97_R24 (Required) Identifiers shall not have both internal and external linkage
end

def m97_rule25
	r
	m extern @type
	%{
		unset E;
		Stop;
	%}
	%{	# extern type ident
		if (.mark == 0) { Next; }
		.mark = 0;
		. = .nxt;	# type
		t = .;
		. = .nxt;	# ident
		if (!@ident) { Next; }
		p = E[.txt];
		if (p.seq > 0)
		{	if (verbose)
			{	print .fnm ":" .lnr ": repeated extern declaration of " p.fnm ":" p.lnr ": " .txt "\n";
			}
			p.mark = 1;
			.mark = 1;
		} else
		{	E[.txt] = t;
		}
	%}
	ps create M97_R25
	ps caption M97_R25 (Required) An identifier with external linkage shall have exactly one external definition
	# covers also: "Rule 27 (Advisory) External objects should not be declared in more than one file."
end

def m97_rule28
	r; m register
	ps create M97_R28
	ps caption M97_R28 (Advisory) The register storage class specifier should not be used
	# rule was omitted in misra2004
end

def m97_rule29
	# limited check, compiler checks other cases already
	# assigning numeric value to enum constant:
	r
	pe M97_R29a: enum @ident = @const
	pe M97_R29b: ( enum @ident ) @const
	ps M97_R29 = M97_R29a + M97_R29b
	ps caption M97_R29 (Required) The use of a tag shall agree with its declaration
	ps delete M97_R29a
	ps delete M97_R29b
end

def m97_rule32
	r; m enum; n; m & {; c =; s =; c ,		# nameless enum, no comma before the first =
	>1
	r; m enum; n; n; m & {; c =; s =; c ,		# named enum
	<|1
	ps create M97_R32
	ps caption M97_R32 (Required) In an enumerator list, '=' shall not be used to initialise items other than the first, unless all items are initialised
end

def m97_rule33
	r; m \&&; s top ); c no \;; c /[-+][-+]	# not in for-loop; pre or post increments
	>1
	r; m \||; s top ); c no \;; c /[-+][-+]
	<|1
	>1
	r; m \&&; s top ); c no \;; c /[^=<>!]=			# assignments
	<|1
	>1
	r; m \||; s top ); c no \;; c /[^=<>!]=
	<|1
	>1
	r; m \&&; s top ); c no \;; c /[a-zA-Z0-9_]+\(		# fct calls
	<|1
	>1
	r; m \||; s top ); c no \;; c /[a-zA-Z0-9_]+\(		# fct calls
	<|1
	ps create M97_R33
	ps caption M97_R33 (Required) The right hand operand of a && or || operator shall not contain side effects
end

def m97_rule34
	r
	m &&
	m ||
	>1
	b
	m no )
	b
	m & @oper
	m no !
	>2
	r
	<1
	n
	m no (
	n
	m & @oper
	m no !
	<|2
	ps create M97_R34
	ps caption M97_R34 (Required) The operands of a logical && or || shall be primary expressions
end

def m97_rule35
	r; m if;    n; c /[-+][-+]		# pre or post increments
	>1
	r; m if;    n; c /[^=<>!]=		# assignments
	<|1
	>1
	r; m while; n; c /[-+][-+]
	<|1
	>1
	r; m while; n; c /[^=<>!]=
	<|1
	>1
	r; m for;   n \;; s \;; c /[-+][-+]
	<|1
	r; m for;   n \;; s \;; c /[^=<>!]=
	ps create M97_R35
	ps caption M97_R35 (Required) Assignment operators shall not be used in conditional expressions of control stmnts (as revised)
end

def m97_rule36
	r; m if; n; c \&
	>1
	r; m if; n; c |
	<|1
	>1
	r; m if; n; c ~
	<|1
	>1
	r; m while; n; c \&
	<|1
	>1
	r; m while; n; c |
	<|1
	>1
	r; m while; n; c ~
	<|1
	>1
	r; m for; n \; ; s \; ; c \&
	<|1
	>1
	r; m for; n \; ; s \; ; c |
	<|1
	>1
	r; m for; n \; ; s \; ; c ~
	ps create M97_R36
	ps caption M97_R36 (Advisory) Logical operators should not be confused with bitwise operators. (As revised:) There shall be no bitwise logical operators (&, |, or ~) in conditional expressions of control stmnts
end

def m97_rule37
	r; symbols
	m |
	m \&
	m ^
	%{
		if (.mark != 1)
		{	Next;
		}
		.mark = 0;
		q = .prv;
		if (q.type == "ident")
		{	p = q.bound;
			if (p.seq > 0)
			{	if (p.txt == "int"
				||  p.txt == "short"
				||  p.txt == "char"
				||  p.txt == "float"
				||  p.txt == "double")
				{	add_pattern(M97_R37, q, .);
		}	}	}
		q = .nxt;
		if (q.type == "ident")
		{	p = q.bound;
			if (p.seq > 0)
			{	if (p.txt == "int"
				||  p.txt == "short"
				||  p.txt == "char"
				||  p.txt == "float"
				||  p.txt == "double")
				{	add_pattern(M97_R37, ., q);
		}	}	}
	%}
	ps caption M97_R37 (Required) Bitwise operations shall not be performed on signed integer types
end

def m97_rule40
	r; m sizeof; n; c /[-=\+\(]
	ps create M97_R40
	ps caption M97_R40 (Advisory) (As revised:) If the sizeof operator is used on an expression, then this expression may not contain any side-effects
end

def m97_rule42
	r
	m ,
	m & (.curly > 0 && .round == 0)
	%{
		if (.type == "type" || .txt == "enum")
		{	m = .;
			while (m.txt != ";")	# declarations
			{	m.mark = 0;
				m = m.nxt;
			}
			Next;
		}

		# exclude initializer lists
		if (.txt == "=")
		{	m = .nxt;
			if (m.txt == "{")
			{	e = m.jmp;
				while (m.seq < e.seq)
				{	m.mark = 0;
					m = m.nxt;
			}	}
			Next;
		}

		# exclude decls using userdefined types: name [*]* name , [*]* name ... ;
		if (@ident)
		{	n = .;
			m = n;
			while (n.txt != ";")
			{	if (n.txt != "*"
				&&  n.txt != "="
				&&  n.txt != ","
				&&  n.txt != "("
				&&  n.txt != ")"
				&&  n.typ != "const_int"
				&&  n.type != "ident")
				{	Next;
				}
				n = n.nxt;
			}
			# if we got here, it's a declaration
			while (m.seq != n.seq)
			{	m.mark = 0;
				m = m.nxt;
			}
			Next;
		}
		# exclude ifdef 0 fragments
		if (.txt == "#if")
		{	m = .nxt;
			if (m.txt == "0")
			{	m = m.nxt;
				# handles most cases, but not all
				# search up to first #endif
				while (m.txt != "#endif" && m.lnr > 0)
				{	m.mark = 0;
					m = m.nxt;
			}	}
		}
	%}
	ps create M97_R42
	ps caption M97_R42 (Required) The comma operator shall not be used, except in the control expression of a for-loop or in declarations or fct args
end

def m97_rule45
	# partial check of void ptrs, but not void * casts
	r; m void \*
	b; m no (
	n
	ps create M97_R45
	ps caption M97_R45 (Required) Pointers must have an associated type (of the object pointed to).
end

def m97_rule49
	r
	pe M97_R49a: [if while] ( @ident )
	pe M97_R49b: for ( .* \; @ident \; .*)
	ps M97_R49 = M97_R49a + M97_R49b
	ps delete M97_R49a
	ps delete M97_R49b
	ps caption M97_R49 (Advisory) Tests of a value against zero should be made explicit, unless the operand is effectively Boolean.
end

def m97_rule50
	r; m [!=]=; b; m & .
	>1
	r; m [!=]=; n; m & .
	<|1
	ps create M97_R50
	ps caption M97_R50 (Required) Floating point variables shall not be tested for exact equality or inequality.
end

def m97_rule52
	# simple cases
	pe M97_R52a: [if while] ( 0 )
	pe M97_R52b: if ( 1 ) { .* } else
	pe M97_R52c: for ( .* \; 0 \; .* )
	ps M97_R52d = M97_R52a + M97_R52b
	ps M97_R52 = M97_R52c + M97_R52d
	ps caption M97_R52 (Required) There shall be no unreachable code. As revised: unless it explicitly deals with exception and failure cases
	ps delete M97_R52a
	ps delete M97_R52b
	ps delete M97_R52c
	ps delete M97_R52d
end

def m97_rule53
	# goto with the target label immediately following
	r
	pe M97_R53: goto x:@ident \; :x :
	ps caption M97_R53 (Required) All non-null statements either have a side-effect or change the flow of control.
end

def m97_rule54
	r; m if;   n; j; n; m & \;	# semi-colon directly following if condition
	>1
	r; m for;  n; j; n; m & \;	# semi-colon directly following for control
	<|1
	>1
	r; m do;   n;       m & \;	# semi-colon directly following do
	<|1
	>1
	r; m else; n;       m & \;	# semi-colon directly following else
	<|1
	ps create M97_R54
	ps caption M97_R54 (Required) A null stmnt shall only occur on a line by itself, and shall not have any other text (e.g., a comment) on the same line
	comments
	%{	q = .bound;
		if (q.seq > 0
		&&  q.txt == ";")
		{	add_pattern(M97_R54a, q, q);
		}
	%}
	source
	ps caption M97_R54a (Required) Null statement cannot immediately follow a comment.
end

def m97_rule55
	r; 
	m ?; s :	# find p ? r : s
	n :; b		# move mark to the ident before the :
	>1		# save
	r; m @ident :	# find name :
	n; n		# to token following :
	unmark /^[0-9]$	# exclude bitfield decls name : nr
	b; b; b		# to token before name
	unmark case	# exclude case stmnts
	unmark ::	# in case of a C++ case label
	n		# back to name
	<^1		# exclude conditional expressions
	ps create M97_R55
	ps caption M97_R55 (Advisory) Labels should not be used, except in switch stmnts
	# rule was omitted from misra2004
end

def m97_rule56
	r; m goto
	ps create M97_R56
	ps caption M97_R56 (Required) The goto stmnt shall not be used
end

def m97_rule57
	r; m continue
	ps create M97_R57
	ps caption M97_R57 (Required) The continue stmnt shall not be used
end

def m97_rule58
	r; m break; n; n; unmark case; unmark default; unmark }
	b; b
	ps create M97_R58
	ps caption M97_R58 (Required) The break stmnt shall not be used, except to terminate the cases of a switch stmnt
	# rule was omitted from misra2004
end

def m97_rule59
	r; m if; n; j; n; unmark {; b
	>1
	r; m for; n; j; n; unmark {; b
	<|1
	>1
	r; m else; n; unmark {; unmark if; b
	<|1
	>1
	r; m do; n; unmark {; b
	<|1
	>1
	r; m while; b; unmark }; n
	n; j; n; unmark {
	b; j; b
	<|1
	ps create M97_R59
	ps caption M97_R59 (Required) The body of an if, else, while, do-while or for shall be enclosed in braces
end
	
def m97_rule60
	r
	check_ifelseif M97_R60
	ps caption M97_R60 (Advisory) All if, else if constructs should contain a final else clause
end

def m97_rule61
	# technically, return stmnts are not allowed, but we permit it here
	r; m case; s case; c \;; c no switch; c no break; c no return
	>1
	r; m case; s default; c \;; c no switch; c no break; c no return
	<|1
	>1
	r; m case; s top }; c \;; c no switch; c no break; c no return
	<|1
	ps create M97_R61
	ps caption M97_R61 (Required) Every non-empty case clause in a switch stmnt shall be terminated by a break stmnt
end

def m97_rule62
	r; m switch; n; j; n; c top no default
	b; j; b
	ps create M97_R62
	ps caption M97_R62 (Required) All switch stmnts should contain a final default clause
end

def m97_rule63
	r; m switch; n {; c top no case
	>1
	r; m switch; n {; c case
	n case; n; s top }; c no case	# partial check
	<|1
	ps create M97_R63
	ps caption M97_R63 (Advisory) There must be more than two cases in a switch stmnt
end

def m97_rule64
	r; m switch \(; n; j; n; unmark no {; c top no case
	ps create M97_R64
	ps caption M97_R64 (Required) Every switch stmnt shall have at least one case
end

def m97_rule65
	r; m for (; n
	c @const_flt
	ps create M97_R65
	ps caption M97_R65 (Required) Floating point variables shall not be used as loop counters.
end

def m97_rule67
	r
	check_for M97_R67
	ps caption M97_R67 (Advisory) Iteration count var should not be modified in the body of a for-loop
end

def m97_rule68
	r
	pe M97_R68: @type <1> [*]* @ident ( .* ) \; @1 (.curly > 0)
	ps caption M97_R68 (Required) Functions shall always be declared at file scope
end

def m97_rule69
	r; m ...
	b;b
	unmark catch	# C++ catch(...)
	n;n
	ps create M97_R69
	ps caption M97_R69 (Required) Functions with variable numbers of arguments shall not be used
end

def m97_rule70
	r; m @ident \(; n; j; ex {; j; b	# all fct decls
	st top }		# set range to fct body (stretch command)
	m ir $$			# match of fct name inside the range
	e \(			# recursive fct call
	ps create M97_R70
	ps caption M97_R70 (Required) Functions shall not call themselves, either directly or indirectly
end

def m97_rule71
	r
	fcts
	ps create FD						# fct declarations
	r
	pe FP: @type <1> \** @ident ( .* ) \; @1 (.curly == 0)	# fct prototype definitions
	%{
		unset x;
		unset y;
		unset z;
		x = pset(FD);		# fct definitions
		y = pset(FP);		# fct prototypes
		while (x.seq > 0)
		{	a = x.p_start;
			if (a.typ == "ident")	# should match, named of defined fct
			{	# fct name
				# check if its in at least one element of FP
				y = pset(FP);
				foundit = 0;
				while (y.seq > 0 && foundit == 0)
				{	z = y.p_start;	# start of one of the prototype defs
					e = y.p_end;
					while (z != e)	# look for name
					{	if (z.txt == a.txt)
						{	foundit = 1;
							break;	# yes, fct a.txt has prototype
						}
						if (z.type == "ident")
						{	break; # fct name is first ident in prototype
						}
						z = z.nxt;
					}
					y = y.nxt;
				}
				if (foundit == 0)
				{	add_pattern(M97_R71, a, a);
				}
			}
			x = x.nxt;
		}
		Stop;
	%}
	ps delete FD;
	ps delete FP;
	ps caption M97_R71 (Required) Functions shall always have prototype declarations and the prototype shall be visible at both the function definition and call.
end

def m97_rule73
	r
	pe  [@type *] @ident <1> ( .* ) \; @1 (.curly == 0)
	m & (
	m & (.round == 0)
	>1
	c @ident ,	# param list contains at least one @ident
	%{
		if (.mark)
		{	p = .;	# move to end of param list
			while (p.round > 0)
			{	p.mark = 0;
				p = p.nxt;
			}
			p = p.nxt;
			z = p;
			while (p != .)
			{	if ((p.txt == ","
				&&   p.round == 1)
				||  (p.txt == ")"
				&&   p.round == 0))
				{	q = p.prv;
					if (q.typ != "ident")
					{	q.mark = 1;
				}	}
				p = p.prv;
			}
			. = z;
		}
	%}
	ps create M97_R73
	ps caption M97_R73 (Required) Identifiers shall either be given for all of the parameters in a fct prototype declaration, or for none
end

def m97_rule75
	r; m @ident \(; m & (!.curly); n; j; n; m & {; b; j; b; b; m & /[\;}]
	ps create M97_R75
	ps caption M97_R75 (Required) Every fct shall have an explicit return type
end

def m97_rule76
	r; m @ident \(; m & (!.curly); n; n; m & )
	ps create M97_R76
	ps caption M97_R76 (Required) Functions with no parameters shall be declared with parameter type void
end

def m97_rule79
	r
	fcts
	b
	m & void
	n
	ps create VF	# void fcts
	r
	m = @ident 	# fct call that uses return value
	m @oper @dent 
	m & (.curly > 0)
	n
	n
	m & (		# fct call
	b		# back fct name
	>1
	r
	m @ident (
	m & (.curly > 0)
	n
	j
	n
	m & @oper
	b; b; b		# back to fct name
	<|1		# both markings -- all names of fcts with return values used
	%{
		unset y;
		y = pset(VF);
		Stop;
	%}
	%{
		if (.mark != 1) { .mark = 0; Next; }
		.mark = 0;
		while (y.seq != 0)
		{	a = y.p_start;
			# a void fct: a.txt
			if (a.txt == .txt)
			{	add_pattern(M97_R79, a, a);
				break;
			}
			y = y.nxt;
		}
	%}
	ps delete VF
	ps caption M97_R79 (Required) The values returned by void functions shall not be used.
end

def m97_rule80
	r; m @ident \(			# fct call
	m & (.curly>0)			# inside a fct
	b;b; unmark extern; n;n		# not extern type name()
	unmark printf			# no printf calls
	n				# move to (...)
	c void		# matches also extern/static fct decls
	n void
	n; unmark *	# not (void *)
	b
	ps create M97_R80
	ps caption M97_R80 (Required) Void expressions shall not be passed as fct parameters
	# rule was omitted from misra2004
end

def m97_rule82
	r; m @ident \(
	m & (!.curly)
	n; j; e {; n
	c return
	n return
	n \;
	n
	w (.txt != } || .curly > 1)
	b return
	ps create M97_R82
	ps caption M97_R82 (Advisory) A fct should have a single point of exit: the textual end of the fct
end

def m97_rule83
	r; m @ident \(; m & (!.curly); j; extend {; j; b; b; mark no void; n {
	c no return	# should match zero ranges
	>1
	r; m @ident \(; m & (!.curly); j; extend {; j; b; b; mark no void; n {
	m ir return	# match all return stmnts inside range
	n		# move to the token that follows, which should not be a semicolon
	m no \;		# return stmnt without expression
	<|1
	ps create M97_R83
	ps caption M97_R83 (Required) For fcts with non-void return type: i) there shall be one return stmnt for every exit branch, including the end of the program ii) each return shall have an expression iii) the return expression shall match the declared return type
end

def m97_rule84
	r
	pe M97_R84: void @ident ( .* ) { .* return ^\; .* }
	ps caption M97_R84 (Required) For functions with void return type, return statements shall not have an expression.
end

def m97_rule86
	r
        pe M97_R86: ^void x:@ident ( .* ) { .* } ^[/= /> /<] :x ( .* ) ^[/= /> /<]
        ps caption M97_R86 (Advisory) If a function returns error information, then that error information should be tested.
end

def m97_rule87
	r
	. jpl/rule31.cobra
	ps create M97_R87
	ps caption M97_R87 (Required) \#include directives in a file shall only be preceded by other preprocessor directives or comments
end

def m97_rule88
	r; m @cpp; m & /include.*[<"].*['\,\*].*[>"]
	ps create M97_R88
	ps caption M97_R88 (Required) Non-standard characters shall not occur in header file names in \#include directives
end

def m97_rule89
	r; m @cpp; m & /include; m no /\<; m no /:"
	ps create M97_R89
	ps caption M97_R89 (Required) The \#include directive shall be followed by either a <filename> or quoted filename sequence
end

def m97_rule91
	r; m @cpp; m & /undef;  m & (.curly > 0)
	>1
	r; m @cpp; m & /define; m & (.curly > 0)
	<|1
	ps create M97_R91
	ps caption M97_R91 (Required) Macros shall not be \#define'd or \#undef'd within a block
end

def m97_rule92
	r; m @cpp; m & /undef
	ps create M97_R92
	ps caption M97_R92 (Advisory) \#undef should not be used
end

def m97_rule93
	# report macros enclosed in { .. }
	pe M97_R93: \#define @ident ( .* ) { .* }
	ps caption M97_R93 (Advisory) A function should be used in preference to a function-like macro
end

def m97_rule95
	# find uses of define include ifdef if ifndef else endif defined in any arg-lists
	pe [define include defined if ifdef ifndef else endif]
	m & (.round > 0 && .curly > 0)
	ps create M97_R95
	ps caption M97_R95 (Required) Arguments to a function-like macro shall not contain tokens that look like pre-processing directives
end

def m97_rule96
	r
	pe M97_R96: \#define @ident ( .* x:@ident .* ) ^[EOL EOF]* ^( :x 
	ps caption M97_R96 (Required) In the def of a fct-like macro the whole def, and each instance of a parameter, shall be enclosed in parentheses.
end

def m97_rule98
	r; m @cpp; m & /\#[^\#]+\#
	ps create M97_R98
	ps caption M97_R98 (Required) There shall be at most one occurrence of the \# or \#\# pre-processor operators in a single macro definition
end

def m97_rule99
	r; m @cpp; m & /pragma
	ps create M97_R99
	ps caption M97_R99 (Required) All uses of the \#pragma directive shall be documented and explained
end

def m97_rule100
	r; m @cpp; m & /defined.*[<>=]	# partial check
	ps create M97_R100
	ps caption M97_R100 (Required) The defined pre-processor operator shall only be used in one of the two standard forms: defined (identifier) or defined identifier
end

def m97_rule101
	r
	pe M97_R101: ( .* * ) ( .* \+ .* )					
	ps caption M97_R101 (Advisory) Pointer arithmetic should not be used.
end

def m97_rule102
	r; m * *; n; n; m & *
	>1
	r; m * *; n; n; m & @ident; n; m & [
	<|1
	ps create M97_R102
	ps caption M97_R102 (Advisory) No more than 2 levels of pointer indirection should be used
end

def m97_rule106
	# check for return of ref to local var
	pe M97_R106a: { .* @type [*]* x:@ident .* return & :x .* }
	pe M97_R106b: { .* @type x:@ident [ .* ] .* return :x .* }
	ps M97_R106 = M97_R106a + M97_R106b
	ps caption M97_R106 (Required) The address of an object with automatic storage shall not be assigned to an object which may persist after the object has ceased to exist
	ps delete M97_R106a
	ps delete M97_R106b
end

def m97_rule107
        pe m97_R107: @ident ( .* * x:@ident .* ) { ^:x* ^[/= /> /<] :x ^[/= /> /<] .* }
	ps caption m97_R107 (Required) The null pointer shall not be de-referenced. (Distrust the validity of pointers before dereferencing)
end

def m97_rule109
	r
	m97_rule110
	ps M97_R109 = M97_R110 + Nothing
	ps caption M97_R109 (Required) Overlapping variable storage shall not be used.
end

def m97_rule110
	r; m union
	ps create M97_R110
	ps caption M97_R110 (Required) Unions shall not be used to access the sub-parts of larger data types
end

def m97_rule111
	r; symbols
	m @ident :
	n; n
	m & @const
	b; b; b
	m & @type	# @type @ident : @const
	m no int
	m no uint
	m no unsigned int
	ps create M97_R111
	ps caption M97_R111 (Required) Bit fields shall only be defined to be of type unsigned int or signed int
end

def m97_rule112
	# flags also:  x ? y : 0
	r; m :; n; m & /^[01]$
	# b \; ; s : ; c no ?; n :
	b	# :
	b	# y
	b	# ?, if there
	unmark ?
	n;n;n
	ps create M97_R112
	ps caption M97_R112 (Required) Bit fields of type signed int shall be at least 2 bits long
end

def m97_rule114
	# checking reserved keywords and a few common standard lib fct names
	r
	m \#define
	m \#undef
	n
	%{
		if (.mark == 0)
		{	Next;
		}
		.mark = 0;
		if (.txt == "auto"
		||  .txt == "break"
		||  .txt == "case"
		||  .txt == "char"
		||  .txt == "const"
		||  .txt == "continue"
		||  .txt == "default"
		||  .txt == "do"
		||  .txt == "double"
		||  .txt == "else"
		||  .txt == "enum"
		||  .txt == "extern"
		||  .txt == "float"
		||  .txt == "for"
		||  .txt == "goto"
		||  .txt == "if"
		||  .txt == "int"
		||  .txt == "long"
		||  .txt == "register"
		||  .txt == "return"
		||  .txt == "short"
		||  .txt == "signed"
		||  .txt == "sizeof"
		||  .txt == "static"
		||  .txt == "struct"
		||  .txt == "switch"
		||  .txt == "typedef"
		||  .txt == "union"
		||  .txt == "unsigned"
		||  .txt == "void"
		||  .txt == "volatile"
		||  .txt == "while"
		||  .txt == "_Packed")
		{	add_pattern(M97_R114, ., .);
			Next;
		}
		if (.txt == "atoi"
		||  .txt == "atol"
		||  .txt == "calloc"
		||  .txt == "malloc"
		||  .txt == "printf"
		||  .txt == "sprintf"
		||  .txt == "fprintf"
		||  .txt == "scanf"
		||  .txt == "fscanf"
		||  .txt == "sscanf"
		||  .txt == "strcpy"
		||  .txt == "strncpy")
		{	add_pattern(M97_R114, ., .);
		}
	%}
	ps caption M97_R114 (Required) Reserved words and standard library function names shall not be redefined or undefined
end

def m97_rule115
	# a small number of initial checks
	r
	fcts
	%{
		if (.mark == 0)
		{	Next;
		}
		.mark = 0;
		if (.txt == "atoi"
		||  .txt == "atol"
		||  .txt == "calloc"
		||  .txt == "malloc"
		||  .txt == "printf"
		||  .txt == "sprintf"
		||  .txt == "fprintf"
		||  .txt == "scanf"
		||  .txt == "fscanf"
		||  .txt == "sscanf"
		||  .txt == "strcpy"
		||  .txt == "strncpy")
		{	add_pattern(M97_R115, ., .);
		}
	%}
	ps caption M97_R115 (Required) Standard library function names shall not be reused
end

def m97_rule118
	r; m /alloc; m free; m no @str
	ps create M97_R118
	ps caption M97_R118 (Required) Dynamic heap memory allocation shall not be used
end

def m97_rule119
	r; m errno
	ps create M97_R119
	ps caption M97_R119 (Required) The error indicator errno shall not be used
end

def m97_rule120
	r; m offsetof
	ps create M97_R120
	ps caption M97_R120 (Required) The macro 'offsetof' in library <stddef.h> shall not be used
end

def m97_rule121
	r; m @cpp; m & /locale.h; m setlocale
	ps create M97_R121
	ps caption M97_R121 (Required) <locale.h> and the setlocale fct shall not be used
	# rule was omitted in misra2004
end

def m97_rule122
	r; m setjmp; m longjmp
	ps create M97_R122
	ps caption M97_R122 (Required) The setjmp macro and the longjmp fct shall not be used
end

def m97_rule123
	r; m @cpp; m & /signal.h
	ps create M97_R123
	ps caption M97_R123 (Required) The signal handling facilities of <signal.h> shall not be used
end

def m97_rule124
	r; m @cpp; m & /stdio.h
	ps create M97_R124
	ps caption M97_R124 (Required) The input/output library <stdio.h> shall not be used in production code in embedded systems
end

def m97_rule125
	r; m atof; m atoi; m atol
	ps create M97_R125
	ps caption M97_R125 (Required) The fcts atof, atoi, and atol from <stdlib.h> shall not be used
end

def m97_rule126
	r; m abort; m exit; m getenv; m system
	ps create M97_R126
	ps caption M97_R126 (Required) The fcts abort, exit, getenv, and system from <stdlib.h> shall not be used
end

def m97_rule127
	r; m @cpp; m & /time.h
	ps create M97_R127
	ps caption M97_R127 (Required) The time handling fcts of library <time.h> shall not be used
end
